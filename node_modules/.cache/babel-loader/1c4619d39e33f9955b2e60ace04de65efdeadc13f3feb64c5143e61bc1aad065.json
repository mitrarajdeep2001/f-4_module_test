{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Define the asynchronous thunk action using createAsyncThunk\nconst fetchPosts = createAsyncThunk('post/fetchPosts', async () => {\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const data = await res.json();\n  return data;\n});\n\n// Create a slice using createSlice\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState: {\n    data: [],\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\n\n// Extract the reducer and the action creator\nexport const {\n  reducer: postsReducer\n} = postsSlice;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchPosts","res","fetch","data","json","postsSlice","name","initialState","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer","postsReducer"],"sources":["C:/Users/rajde/OneDrive/Documents/Contest/f-4_module_test/src/Store/Slices.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// Define the asynchronous thunk action using createAsyncThunk\r\nconst fetchPosts = createAsyncThunk('post/fetchPosts', async () => {\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n    const data = await res.json()\r\n    return data\r\n})\r\n\r\n// Create a slice using createSlice\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState: {\r\n      data: [],\r\n      loading: false,\r\n      error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n      builder\r\n        .addCase(fetchPosts.pending, (state) => {\r\n          state.loading = true;\r\n          state.error = null;\r\n        })\r\n        .addCase(fetchPosts.fulfilled, (state, action) => {\r\n          state.loading = false;\r\n          state.data = action.payload;\r\n        })\r\n        .addCase(fetchPosts.rejected, (state, action) => {\r\n          state.loading = false;\r\n          state.error = action.error.message;\r\n        });\r\n    },\r\n  });\r\n  \r\n  // Extract the reducer and the action creator\r\n  export const { reducer: postsReducer } = postsSlice;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,MAAMC,UAAU,GAAGD,gBAAgB,CAAC,iBAAiB,EAAE,YAAY;EAC/D,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EACrE,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EAC7B,OAAOD,IAAI;AACf,CAAC,CAAC;;AAEF;AACA,MAAME,UAAU,GAAGP,WAAW,CAAC;EAC3BQ,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZJ,IAAI,EAAE,EAAE;IACRK,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACb,UAAU,CAACc,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDI,OAAO,CAACb,UAAU,CAACgB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACZ,IAAI,GAAGc,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAACb,UAAU,CAACmB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEC,OAAO,EAAEC;AAAa,CAAC,GAAGjB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}